# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Setup dotnet and tools
description: Setup .NET and other tools typically used when building and testing .NET code

inputs:
  dotnet_version:
    description: Install specified .NET Core SDK version
    required: false
  # Cosmos DB emulator
  use_cosmos_db_emulator:
    description: Install Cosmos DB emulator to support testing
    required: false
    default: "false"
  # Node and modules
  use_azure_functions_tools:
    description: Install Azurite and Azure Functions Core Tools to support testing
    required: false
    default: "false"
  node_version:
    description: Install specified Node.js version
    required: false
    default: "16"
  azurite_version:
    description: Install specified Azurite version
    required: false
    default: 3.32.0
  azure_functions_core_tools_version:
    description: Install specified Azure Functions Core Tools version
    required: false
    default: 4.0.5413
  # SQL LocalDB 2019
  use_sqllocaldb_2019:
    description: Install 2019 version of SQL LocalDB to support testing
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Setup .NET ${{ inputs.dotnet_version }}
      if: ${{ inputs.dotnet_version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
      env:
        DOTNET_INSTALL_DIR: C:\Program Files\dotnet

    # If the emulator is not started within <timeout> seconds the 'Start-CosmosDbEmulator' timeout.
    # We have added a retry action to see if this can mitigate builds failing on this account.
    - name: Setup Azure Cosmos DB Emulator (with retry)
      if: ${{ inputs.use_cosmos_db_emulator == 'true' }}
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 10
        max_attempts: 3
        retry_on: error
        shell: pwsh
        command: |
          Write-Host "Start Cosmos DB Emulator..."
          Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
          $error.Clear()
          Start-CosmosDbEmulator -NoUI -Timeout 240
          if ($error)
          {
            Write-Host "Failed"
            Exit 1
          }

    - name: Use Node v${{ inputs.node_version }}
      if: ${{ inputs.use_azure_functions_tools == 'true' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}

    - name: Cache node modules
      if: ${{ inputs.use_azure_functions_tools == 'true' }}
      id: cache-nodemodules
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-azurite-${{ inputs.azurite_version }}-func-${{ inputs.azure_functions_core_tools_version }}
        path: ${{ github.workspace }}\node_modules

    - name: Install Azurite v${{ inputs.azurite_version }}
      if: ${{ inputs.use_azure_functions_tools == 'true' && steps.cache-nodemodules.outputs.cache-hit != 'true' }}
      shell: pwsh
      run: |
        npm install azurite@${{ inputs.azurite_version }}

    - name: Install Azure Functions Core Tools v${{ inputs.azure_functions_core_tools_version }}
      if: ${{ inputs.use_azure_functions_tools == 'true' && steps.cache-nodemodules.outputs.cache-hit != 'true' }}
      shell: pwsh
      run: |
        npm install azure-functions-core-tools@${{ inputs.azure_functions_core_tools_version }}

    - name: Install SQL LocalDB 2019
      if: ${{ inputs.use_sqllocaldb_2019 == 'true' }}
      shell: pwsh
      run: |
        Write-Host "Downloading..."
        Import-Module BitsTransfer
        Start-BitsTransfer -Source https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi -Destination SqlLocalDB.msi
        Write-Host "Installing..."
        Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES";
        Write-Host "Checking version..."
        sqlcmd -l 60 -S "(localdb)\MSSQLLocalDB" -Q "SELECT @@VERSION;"
