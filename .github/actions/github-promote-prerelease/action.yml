name: Promote Prerelease
description: Promote a prerelease to a release and update the latest release
inputs:
  release_name:
    description: The name of the prerelease to promote
    required: true
  postfix_latest:
    description: Add _latest to the release name
    required: false
    default: "true"
runs:
  using: composite
  steps:
    - name: Set release name
      shell: bash
      run: |
        PREFIX=$(echo "${{ inputs.release_name }}" | grep -o '^.*_' | sed 's/_$//')
        if [ "${{ inputs.postfix_latest }}" == "true" ]; then
          LATEST_RELEASE="${PREFIX}_latest"
        else
          LATEST_RELEASE="${PREFIX}"
        fi
        echo "LATEST_RELEASE=$LATEST_RELEASE" >>$GITHUB_ENV
    - name: Promote ${{ inputs.release_name }} and update ${{ env.LATEST_RELEASE }}
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo 'Promoting ${{ inputs.release_name }} from pre-release to release'
        gh release edit ${{ inputs.release_name }} --prerelease=false

        echo 'Checking if ${{ env.LATEST_RELEASE }} exists'
        set +e
        gh release view ${{ env.LATEST_RELEASE }}
        LATEST_EXIST=$?
        set -e

        if [ $LATEST_EXIST -eq 0 ]; then
          echo 'Deleting ${{ env.LATEST_RELEASE }}'
          gh release delete ${{ env.LATEST_RELEASE }} --yes
        else
          echo '${{ env.LATEST_RELEASE }} does not exist'
        fi

        echo 'Creating new ${{ env.LATEST_RELEASE }}'
        gh release create ${{ env.LATEST_RELEASE }} --title ${{ env.LATEST_RELEASE }} --notes "RELEASE_NAME=${{ inputs.release_name }}" --latest
