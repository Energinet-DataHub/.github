# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: YAML linting
description: Sets the value in a yaml file.

inputs:
  yaml_file_or_folder:
    description: Path to the yaml file or folder to perform linting on
    required: true
  check_lowercase_input_params:
    description: Should we fail linting if input params in workflow and actions contain uppercase letters? Default is false
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: 'Checkout'
      uses: actions/checkout@v3

    - name: Install yamllint
      shell: bash
      run: pip install yamllint

    - name: Lint YAML files
      shell: bash
      run: yamllint -f colored ${{ inputs.yaml_file_or_folder }} 

    - name: Github input variables in should be lowercase
      if: ( ${{ inputs.check_lowercase_input_params }} == 'true' )
      shell: pwsh
      run: |
        $folder = "${{ inputs.yaml_file_or_folder }}"

        Install-Module -Name powershell-yaml -Force -Repository PSGallery -Scope CurrentUser
        $files = Get-ChildItem -Path $folder -Recurse -File -Include ('*.yml', '*.yaml')
        Write-Host "Files found: $($files.Length)"
        $failStep = $false

        foreach($file in $files) {
            Write-Host "Checking $($file.FullName)"
            $yaml = Get-Content -Path $file.FullName | Out-String
            $yaml = $yaml.Replace('{{', '').Replace('}}', '')
            $jsonObj = (ConvertFrom-Yaml -Yaml $yaml)

            foreach($inputKey in ($null -ne $jsonObj.on.workflow_call.inputs ? $jsonObj.on.workflow_call.inputs.Keys : $jsonObj.inputs.Keys)) {
                if (!($inputKey -ceq $inputKey.ToLower())) {
                    Write-Host “Input variable '$inputKey' contains uppercase characters”
                   
                    $failStep = $true
                }
            }
        }

        if ($failStep) {
            throw 'One or more input variables contain uppercase characters'
            exit 1      
        } 