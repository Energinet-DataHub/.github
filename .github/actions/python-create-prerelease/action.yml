name: Create Prerelease
description: Create a prerelease for a package
inputs:
  name:
    description: The name of the package
    required: true
  path:
    description: The path to the package
    required: true
  issue-number:
    description: The issue or PR number
    required: true
  create_versioned_release:
    description: |
      If true, the release name will be "{package_name}_{version}_{issue_number}".
      Otherwise, the release name will be "{package_name}_{issue_number}".
    required: false
    default: "true"
  create_subsystem_release:
    description: |
      If true, the release will include a directory called `subsystem_tests`, which
      contains the `src`, `tests`, and `subsystem_tests` directories, the `pyproject.toml`,
      and the `README.md` files.
      This is useful is you need to test parts of the system in CD.
    required: false
    default: "false"
  github_token:
    description: The GitHub token
    required: false
    default: ${{ github.token }}
  github_workspace:
    description: The GitHub workspace
    required: false
    default: ${{ github.workspace }}
runs:
  using: composite
  steps:
    - name: Setup Environment
      shell: bash
      run: |
        VERSION=$(cat ${{ inputs.path }}/pyproject.toml| grep -o "version.*" | cut -d'=' -f2 | tr -d '"' | tr -d ' ')
        if [[ "${{ inputs.create_versioned_release }}" == "true" ]]; then
          echo "RELEASE_VERSION=${{ inputs.name }}_${VERSION}_${{ inputs.issue-number }}" >> $GITHUB_ENV
        else
          echo "RELEASE_VERSION=${{ inputs.name }}_${{ inputs.issue-number }}" >> $GITHUB_ENV
        fi
        echo "RELEASE_ZIP_FILENAME=${{ inputs.name }}_${{ inputs.issue-number }}.zip" >> $GITHUB_ENV
        echo "RELEASE_FOLDER_PATH=${{ inputs.github_workspace }}/${{ inputs.name }}-release/artifacts" >> $GITHUB_ENV

    - name: Build ${{ inputs.name }}
      shell: bash
      run: uv build --wheel --directory ${{ inputs.path }}

    - name: Copy files for ${{ inputs.name }} prerelease
      shell: bash
      run: |
        mkdir -p ${{ env.RELEASE_FOLDER_PATH }}
        if [ -d ${{ inputs.path }}/dist ]; then
          cp -r ${{ inputs.path }}/dist ${{ env.RELEASE_FOLDER_PATH }}/dist
        fi
        if [[ ${{ inputs.create_subsystem_release }} == 'true' ]]; then
          rsync -avm \
              --exclude="**/__pycache__/" \
              --include="src**" \
              --include="tests/***" \
              --include="pyproject.toml" \
              --include="README.md" \
              --include=".python-version" \
              --exclude="*" \
              ${{ inputs.path }}/ \
              ${{ env.RELEASE_FOLDER_PATH }}/subsystem_tests/
        fi

    - name: Zip files for ${{ inputs.name }} prerelease
      uses: thedoctor0/zip-release@0.7.6
      with:
        type: zip
        filename: ${{ env.RELEASE_ZIP_FILENAME }}
        directory: ${{ env.RELEASE_FOLDER_PATH }}

    - name: Create prerelease for ${{ inputs.name }}
      uses: Energinet-Datahub/.github/.github/actions/github-create-release@v14
      with:
        repo_token: ${{ inputs.github_token }}
        automatic_release_tag: ${{ env.RELEASE_VERSION }}
        prerelease: true
        title: ${{ env.RELEASE_VERSION }}
        files: |
          ${{ env.RELEASE_FOLDER_PATH }}/${{ env.RELEASE_ZIP_FILENAME }}
