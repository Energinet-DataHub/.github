name: Create Prerelease
description: Create a prerelease for a package
inputs:
  package_name:
    description: The name of the package
    required: true
  package_path:
    description: The path to the package
    required: true
  release_name:
    description: The name of the release
    required: true
  create_subsystem_release:
    description: |
      If true, the release will include a directory called `subsystem_tests`,
      which contains the source code and tests of the package.
      This is useful is you need to test parts of the system in CD.
    required: false
    default: "false"
  github_token:
    description: The GitHub token
    required: false
    default: ${{ github.token }}
  github_workspace:
    description: The GitHub workspace
    required: false
    default: ${{ github.workspace }}
  rsync_args:
    description: The arguments to pass to rsync
    required: false
    default: -avm --exclude='**/__pycache__/' --include='src/***' --include='tests/***' --include='pyproject.toml' --include='README.md' --include='.python-version' --include='*.json' --exclude='*'
runs:
  using: composite
  steps:
    - name: Setup Environment
      shell: bash
      run: |
        echo "RELEASE_ZIP_FILENAME=${{ inputs.release_name }}.zip" >> $GITHUB_ENV
        echo "RELEASE_FOLDER_PATH=${{ inputs.github_workspace }}/${{ inputs.package_name }}-release/artifacts" >> $GITHUB_ENV

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: ${{ inputs.package_path }}
        format: spdx-json
        output-file: ${{ inputs.package_path }}/sbom.json

    - name: Cat file
      shell: bash
      working-directory: ${{ inputs.package_path }}
      run: ls -a

    - name: Build ${{ inputs.package_name }}
      shell: bash
      run: uv build --wheel --directory ${{ inputs.package_path }}

    - name: Copy files for ${{ inputs.package_name }} prerelease
      shell: bash
      run: |
        mkdir -p ${{ env.RELEASE_FOLDER_PATH }}
        if [ -d ${{ inputs.package_path }}/dist ]; then
          cp -r ${{ inputs.package_path }}/dist ${{ env.RELEASE_FOLDER_PATH }}/dist
        fi
        if [[ ${{ inputs.create_subsystem_release }} == 'true' ]]; then
          rsync ${{ inputs.rsync_args }} \
              ${{ inputs.package_path }}/ \
              ${{ env.RELEASE_FOLDER_PATH }}/subsystem_tests/
        fi

    - name: Zip files for ${{ inputs.package_name }} prerelease
      uses: thedoctor0/zip-release@0.7.6
      with:
        type: zip
        filename: ${{ env.RELEASE_ZIP_FILENAME }}
        directory: ${{ env.RELEASE_FOLDER_PATH }}

    - name: Create prerelease for ${{ inputs.name }}
      uses: Energinet-Datahub/.github/.github/actions/github-create-release@v14
      with:
        repo_token: ${{ inputs.github_token }}
        automatic_release_tag: ${{ inputs.release_name }}
        prerelease: true
        title: ${{ inputs.release_name }}
        files: |
          ${{ env.RELEASE_FOLDER_PATH }}/${{ env.RELEASE_ZIP_FILENAME }}
