name: "Python Covernator Commit"
description: "Run geh_common hybrid Covernator generator and commit Markdown summary"

inputs:
  project_directory:
    required: true
    description: "Path to project root (with tests/)"
  geh_common_branch:
    required: false
    default: "claus/covernator_final"
    description: "geh_common branch to install from"
  commit_message:
    required: false
    default: "Update Covernator results [skip ci]"
    description: "Commit message when pushing markdown"

runs:
  using: "composite"
  steps:
    - name: Checkout domain repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref || github.ref_name }}
        fetch-depth: 0
        persist-credentials: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Setup uv
      uses: astral-sh/setup-uv@v5

    - name: Install geh_common
      shell: bash
      run: |
        echo "Installing geh_common from branch ${{ inputs.geh_common_version }}"
        uv pip install --system \
          "geh_common @ git+https://git@github.com/Energinet-DataHub/opengeh-python-packages@${{ inputs.geh_common_version }}#subdirectory=source/geh_common"

    - name: Run Covernator (hybrid mode)
      id: covernator
      shell: bash
      run: |
        python - <<'PYCODE'
from geh_common.covernator_streamlit.commands import run_covernator_return
from pathlib import Path
import json

results = run_covernator_return("${{ inputs.project_directory }}")

# Save Markdown summary
out_path = Path("docs/covernator")
out_path.mkdir(parents=True, exist_ok=True)
md_file = out_path / "coverage_overview.md"
md_file.write_text(results.markdown, encoding="utf-8")

# Export to GitHub Action outputs
print(f"::set-output name=total_cases::{results.stats.get('total_cases', 0)}")
print(f"::set-output name=total_scenarios::{results.stats.get('total_scenarios', 0)}")
print(f"::set-output name=total_groups::{results.stats.get('total_groups', 0)}")
print("::set-output name=info_logs::" + "\\n".join(results.info_logs[-5:]))
print("::set-output name=error_logs::" + "\\n".join(results.error_logs[-5:]))
PYCODE

    - name: Commit Markdown summary
      shell: bash
      env:
        BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      run: |
        git config user.name "github-actions"
        git config user.email "ci@github.com"
        git add docs/covernator/coverage_overview.md || true
        if git diff --cached --quiet; then
          echo "No Markdown changes to commit."
          exit 0
        fi
        git commit -m "${{ inputs.commit_message }}"
        git push origin HEAD:${BRANCH_NAME}

    - name: Add PR comment with stats
      uses: mshick/add-pr-comment@v2
      with:
        message-id: covernator-summary
        message: |
          ðŸ§© **Python Covernator Summary**
          âœ… Successfully generated coverage report for `${{ github.repository }}`

          **Stats**
          â€¢ Total Cases: **${{ steps.covernator.outputs.total_cases }}**
          â€¢ Unique Scenarios: **${{ steps.covernator.outputs.total_scenarios }}**
          â€¢ Unique Groups: **${{ steps.covernator.outputs.total_groups }}**

          **Recent Info Logs**
          ```
          ${{ steps.covernator.outputs.info_logs }}
          ```

          **Recent Error Logs**
          ```
          ${{ steps.covernator.outputs.error_logs }}
          ```

          **geh_common branch:** `${{ inputs.geh_common_branch }}`
          **Committed file:** `docs/covernator/coverage_overview.md`
