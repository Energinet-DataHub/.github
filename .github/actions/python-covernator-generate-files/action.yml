name: "Python Covernator Commit"
description: "Generate and display Covernator coverage results with INFO/ERROR logs"

inputs:
  project_directory:
    required: true
    description: "Path to the project root (where tests/ live)"
  geh_common_version:
    required: false
    default: "7.2.1"
    description: "geh_common package version"

runs:
  using: "composite"
  steps:
    - name: Checkout domain repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: true

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Setup uv
      uses: astral-sh/setup-uv@v5

    - name: Install geh_common
      shell: bash
      run: |
        echo "Installing geh_common version ${{ inputs.geh_common_version }}"
        uv pip install --system \
          "geh_common @ git+https://git@github.com/Energinet-DataHub/opengeh-python-packages@geh_common_${{ inputs.geh_common_version }}#subdirectory=source/geh_common"

    - name: Run Covernator locally
      id: covernator
      shell: bash
      run: |
        mkdir -p docs/covernator
        echo "â–¶ Running Covernator on ${{ inputs.project_directory }}"
        python -m geh_common.covernator_streamlit.server \
          -g \
          -o docs/covernator \
          -k stats \
          -p ${{ inputs.project_directory }}

        echo "â–¶ Generated files in docs/covernator:"
        ls -lah docs/covernator

        # âœ… Compact JSON and extract details
        safe_json=$(jq -c . docs/covernator/stats.json)
        total_cases=$(echo "$safe_json" | jq '.total_cases')
        total_scenarios=$(echo "$safe_json" | jq '.total_scenarios')
        total_groups=$(echo "$safe_json" | jq '.total_groups')

        # Extract latest info and error messages (max 5 of each)
        info_lines=$(echo "$safe_json" | jq -r '.logs.info[-5:][]?.message' | sed 's/^/- /')
        error_lines=$(echo "$safe_json" | jq -r '.logs.error[-5:][]?.message' | sed 's/^/- /')

        echo "total_cases=$total_cases" >> "$GITHUB_OUTPUT"
        echo "total_scenarios=$total_scenarios" >> "$GITHUB_OUTPUT"
        echo "total_groups=$total_groups" >> "$GITHUB_OUTPUT"

        # Export logs as multiline outputs
        echo "info_logs<<EOF" >> "$GITHUB_OUTPUT"
        echo "$info_lines" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

        echo "error_logs<<EOF" >> "$GITHUB_OUTPUT"
        echo "$error_lines" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"

    - name: Get CET timestamp
      id: time
      shell: bash
      run: |
        CET_TIME=$(TZ="Europe/Copenhagen" date '+%Y-%m-%d %H:%M:%S %Z')
        echo "time_cet=$CET_TIME" >> "$GITHUB_OUTPUT"

    - name: Add PR comment with summary and logs
      uses: mshick/add-pr-comment@v2
      with:
        message-id: covernator-stats
        message: |
          ðŸ§© **Python Covernator Commit**
          âœ… Successfully generated Covernator results for `${{ github.repository }}`

          **Stats Summary**
          â€¢ Total Cases: **${{ steps.covernator.outputs.total_cases }}**
          â€¢ Unique Scenarios: **${{ steps.covernator.outputs.total_scenarios }}**
          â€¢ Unique Groups: **${{ steps.covernator.outputs.total_groups }}**

          **Recent INFO logs**
          ```
          ${{ steps.covernator.outputs.info_logs }}
          ```

          **Recent ERROR logs**
          ```
          ${{ steps.covernator.outputs.error_logs }}
          ```

          **geh_common version:** ${{ inputs.geh_common_version }}
          **Branch:** `${{ github.ref_name }}`
          **Generated:** ${{ steps.time.outputs.time_cet }}
