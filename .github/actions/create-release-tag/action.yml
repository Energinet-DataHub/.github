# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: "Create release tag"
description: "Create new release tag in repository"
inputs:
  MAJOR_VERSION:
    description: "Major version"
    required: true
  MINOR_VERSION:
    description: "Minor version"
    required: true
  PATCH_VERSION:
    description: "Patch version"
    required: true
  REPOSITORY_PATH:
    description: 'Path to repository, i.e. Energinet-DataHub\geh-terraform-modules'
    required: true
  TARGET_BRANCH:
    description: "Branch on which tags will be created. Default: main"
    required: false
    default: "main"

runs:
  using: composite
  steps:
    - name: Create release tag
      shell: pwsh
      run: |
        $major = ${{ inputs.MAJOR_VERSION }}
        $minor = ${{ inputs.MINOR_VERSION }}
        $patch = ${{ inputs.PATCH_VERSION }}
        $repo = "${{ inputs.REPOSITORY_PATH }}"
        $targetBranch = "${{ inputs.TARGET_BRANCH }}"

        Write-Host "Github event name is:" ${{ github.event_name }}
        $isPullRequest = ('${{ github.event_name }}' -eq 'pull_request')
        Write-Host "Is PR: $isPullRequest"


        if ($env:GH_TOKEN -eq '') {
          throw "Error: GH_TOKEN environment variable is not set, see https://cli.github.com/manual/gh_auth_login for details"
        }

        $semver = "$major.$minor.$patch"
        Write-Host "New version tag: $semver"
        Write-Host "Major version tag is: v$major"

        $currentReleases = gh release list -L 10000 -R $repo | ConvertFrom-Csv -Delimiter "`t" -Header @('title','type','tagname','published')

        foreach($release in $currentReleases)
        {
            if ($release.title -eq $semver) {
                throw "Error: Cannot create release $semver in $repo as it already exists !"
            }
        }

        Write-Host 'Tag does not exist, all clear'

        if (!$isPullRequest) {

            Write-Host "Deleting major version tag v$major"
            gh release delete "v$major" -y --cleanup-tag  -R $repo

            Write-Host "Creating new major version tag v$major"
            gh release create "v$major" --title "v$major" --notes "Latest release"  --target $targetBranch -R $repo

            Write-Host "Creating $semver"
            gh release create $semver --generate-notes --latest --title $semver --target $targetBranch -R $repo
        } else {
          Write-Host 'This was a dry-run, no changes have been made'
        }

        Write-Host "All done"
