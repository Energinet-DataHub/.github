name: Semver - Diff
description: Diff two semver versions.

inputs:
  version-a:
    description: A valid semver version
    required: true
  version-b:
    description: A valid semver version
    required: true
  version-start:
    description: Which number a minor or patch version is reset to, if a higher version has been increased
    required: false
    default: "0"

outputs:
  result:
    description: |
      The logicial difference of the given versions.
      Examples (given version-start is set to 0):
        1.0.0 and 1.0.1 -> 0.0.1
        1.0.0 and 1.1.1 -> 0.1.0
        1.0.0 and 2.1.1 -> 1.0.0
        1.0.1 and 1.0.0 -> 0.0.1
        1.1.1 and 1.0.0 -> 0.1.0
        2.1.1 and 1.0.0 -> 1.0.0
        1.0.0 and 1.0.3 -> 0.0.3
        1.0.0 and 1.0.0 -> 0.0.0
        1.0.0 and 1.0.3-pr.123-aef09c8 -> 0.0.3
    value: ${{ steps.diff-versions.outputs.result }}
  major:
    description: The major part of the result
    value: ${{ steps.diff-versions.outputs.major }}
  minor:
    description: The minor part of the result
    value: ${{ steps.diff-versions.outputs.minor }}
  patch:
    description: The patch part of the result
    value: ${{ steps.diff-versions.outputs.patch }}
        

runs:
  using: composite
  steps:
    - name: Diff versions
      id: diff-versions
      shell: bash
      run: |
        ARGUMENT_A=${{ inputs.version-a }}
        ARGUMENT_B=${{ inputs.version-b }}
        ARGUMENT_START=${{ inputs.version-start }}

        COUNT_A=$(echo "$ARGUMENT_A" | tr -cd "." | wc -c)
        COUNT_B=$(echo "$ARGUMENT_B" | tr -cd "." | wc -c)

        if [ $COUNT_A -lt 2 ]
        then
            echo "Version given does not match: major.minor.patch"
            echo "Given version-a: $ARGUMENT_A"
            exit 1
        fi

        if [ $COUNT_B -lt 2 ]
        then
            echo "Version given does not match: major.minor.patch"
            echo "Given version-b: $ARGUMENT_B"
            exit 1
        fi

        A_0=$(echo "$ARGUMENT_A" | cut -d. -f1)
        A_1=$(echo "$ARGUMENT_A" | cut -d. -f2)
        A_2=$(echo "$ARGUMENT_A" | cut -d. -f3)

        B_0=$(echo "$ARGUMENT_B" | cut -d. -f1)
        B_1=$(echo "$ARGUMENT_B" | cut -d. -f2)
        B_2=$(echo "$ARGUMENT_B" | cut -d. -f3)

        V_0=$((A_0-B_0))
        V_1=$((A_1-B_1))
        V_2=$((A_2-B_2))

        V_0=${V_0#-}
        V_1=${V_1#-}
        V_2=${V_2#-}

        if [ $V_0 -gt 0 ]
        then
            V_1="0"
            V_2=0
        elif [ $V_1 -gt 0 ]
        then
            V_2=0
        fi

        echo "::set-output name=major::${V_0}"
        echo "::set-output name=minor::${V_1}"
        echo "::set-output name=patch::${V_2}"
        echo "::set-output name=result::${V_0}.${V_1}.${V_2}"