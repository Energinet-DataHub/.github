name: Semver - Diff
description: Diff two semver versions.

inputs:
  version-a:
    description: A valid semver version
    required: true
  version-b:
    description: A valid semver version
    required: true
  version-start:
    description: Which number a minor or patch version is reset to, if a higher version has been increased
    required: false
    default: "0"

outputs:
  result:
    description: |
      The logicial difference of the given versions.
      Examples (given version-start is set to 0):
        1.0.0 and 1.0.1 -> 0.0.1
        1.0.0 and 1.1.1 -> 0.1.0
        1.0.0 and 2.1.1 -> 1.0.0
        1.0.1 and 1.0.0 -> 0.0.1
        1.1.1 and 1.0.0 -> 0.1.0
        2.1.1 and 1.0.0 -> 1.0.0
        1.0.0 and 1.0.3 -> 0.0.3
        1.0.0 and 1.0.0 -> 0.0.0
    value: ${{ steps.diff-versions.outputs.result }}
  major:
    description: The major part of the result
    value: ${{ steps.diff-versions.outputs.major }}
  minor:
    description: The minor part of the result
    value: ${{ steps.diff-versions.outputs.minor }}
  patch:
    description: The patch part of the result
    value: ${{ steps.diff-versions.outputs.patch }}
        

runs:
  using: composite
  steps:
    - name: Diff versions
      id: diff-versions
      shell: bash
      run: |
        A_VERSIONS=( ${${{ inputs.version-a }}//./ }
        B_VERSIONS=( ${${{ inputs.version-b }}//./ }

        if [ ${#A_VERSIONS[@]} -ne 3 ]
        then
          echo "Version given does not match: major.minor.patch"
          echo "Given version-a: ${{ inputs.version-a }}"
          exit 1
        fi

        if [ ${#B_VERSIONS[@]} -ne 3 ]
        then
          echo "Version given does not match: major.minor.patch"
          echo "Given version-b: ${{ inputs.version-b }}"
          exit 1
        fi

        A_VERSIONS[0]=((A_VERSIONS[0]-B_VERSIONS[0]))
        A_VERSIONS[1]=((A_VERSIONS[1]-B_VERSIONS[0]))
        A_VERSIONS[2]=((A_VERSIONS[2]-B_VERSIONS[0]))

        A_VERSIONS[0]=${A_VERSIONS[0]#-}
        A_VERSIONS[1]=${A_VERSIONS[1]#-}
        A_VERSIONS[2]=${A_VERSIONS[2]#-}

        if [ A_VERSIONS[0] -gt 0 ]
        then
          A_VERSIONS[1]=${{ inputs.version-start }}
          A_VERSIONS[2]=${{ inputs.version-start }}
        elif [ A_VERSIONS[1] -gt 0 ]
        then
          A_VERSIONS[2]=${{ inputs.version-start }}
        fi

        echo "::set-output name=major::${A_VERSIONS[0]}"
        echo "::set-output name=minor::${A_VERSIONS[1]}"
        echo "::set-output name=patch::${A_VERSIONS[2]}"
        echo "::set-output name=result::${A_VERSIONS[0]}.${A_VERSIONS[1]}.${A_VERSIONS[2]}"
