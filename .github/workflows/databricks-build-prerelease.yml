# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Databricks build - prerelease

# DESCRIPTION:
#
# Should only be used for pull requests.
#
# This workflow will build a python wheel for databricks
# and then create a prerelease package containing this wheel.
# The prerelease name will be in the format 'databricks_<PR-number>'.

on:
  workflow_call:
    inputs:
      python_version:
        required: true
        type: string
      architecture:
        required: false
        type: string
        default: x64
      wheel_working_directory:
        required: true
        type: string
      multiple_wheels:
        required: false
        type: boolean
        default: false
      should_include_assets:
        required: false
        type: boolean
        default: false
      operating_system:
        required: false
        default: ubuntu-latest
        type: string
      prerelease_prefix:
        required: false
        type: string
        default: databricks

jobs:
  create_prerelease:
    runs-on: ${{ inputs.operating_system }}

    env:
      RELEASE_FOLDER_PATH: ${{ inputs.wheel_working_directory }}/artifacts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
          architecture: ${{ inputs.architecture }}

      - name: Find associated pull request
        uses: Energinet-DataHub/.github/.github/actions/find-related-pr-number@v14
        id: find_pull_request

      - name: Generate SBOM
        if: ${{ ! inputs.multiple_wheels }}
        uses: anchore/sbom-action@v0.20.6
        with:
          path: ${{ inputs.wheel_working_directory }}
          format: spdx-json
          output-file: ${{ inputs.wheel_working_directory }}/sbom.json
          artifact-name: sbom

      # This creates the wheel in a subfolder "dist"
      - name: Create Single Python Wheel for Databricks Jobs
        shell: bash
        if: ${{ ! inputs.multiple_wheels }}
        working-directory: ${{ inputs.wheel_working_directory }}
        run: |
          pip install wheel
          # Check name of package_data
          PACKAGE_NAME=$(grep -A1 "package_data" setup.py | grep '"' | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
          echo "Package name: $PACKAGE_NAME"
          cp ./sbom.json ./$PACKAGE_NAME/sbom.json
          python setup.py sdist bdist_wheel
          mkdir "./artifacts"
          mv "./dist" "./artifacts"
        env:
          RELEASE_NUMBER: ${{ steps.find_pull_request.outputs.pull_request_number }}

      # This creates the wheels in a subfolder "dist"
      - name: Create Multiple Python Wheel for Databricks Jobs
        shell: bash
        if: ${{ inputs.multiple_wheels }}
        working-directory: ${{ inputs.wheel_working_directory }}
        run: |
          pip install wheel
          curl -sSfL https://get.anchore.io/syft | sudo sh -s -- -b /usr/local/bin
          mkdir "./artifacts"

          # Loop through all directories in the current path
          for dir in */ ; do
            # Check if setup.py exists in the directory
            if [[ -f "$dir/setup.py" ]]; then
              echo "Found setup.py in $dir. Running python setup.py..."

              # Create a subfolder in artifacts with the same name as the current folder
              output_dir="./artifacts/${dir%/}"
              mkdir -p "$output_dir"
              echo "Created output directory: $output_dir"

              cd "$dir"

              echo "Generating SBOM"
              syft . -o spdx-json | jq . > sbom.json
              # Check name of package_data
              PACKAGE_NAME=$(grep -A1 "package_data" setup.py | grep '"' | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
              echo "Package name: $PACKAGE_NAME"
              cp ./sbom.json ./$PACKAGE_NAME/sbom.json

              echo "Running python setup.py in $dir"
              (python setup.py sdist bdist_wheel)

              # Move the generated files to the artifacts subfolder
              echo "Moving files to $output_dir"
              mv "$dir/dist" "$output_dir/"

              # Clean up the dist folder after moving the files
              rm -rf "$dir/dist"
            else
              echo "No setup.py found in $dir"
            fi
          done
        env:
          RELEASE_NUMBER: ${{ steps.find_pull_request.outputs.pull_request_number }}

      - name: Include Databricks assets in release
        if: ${{ inputs.should_include_assets }}
        uses: ./.github/actions/add-databricks-release-assets
        with:
          wheel_working_directory: ${{ inputs.wheel_working_directory }}

      - name: Get release version strings
        id: get_release_version_strings
        uses: Energinet-DataHub/.github/.github/actions/github-get-releaseversion-strings@v14
        with:
          release_name_prefix: ${{ inputs.prerelease_prefix }}

      - name: Zip files for prerelease
        uses: thedoctor0/zip-release@0.6.2
        with:
          type: zip
          filename: ${{ steps.get_release_version_strings.outputs.release_zip_filename }}
          directory: ${{ env.RELEASE_FOLDER_PATH }}

      - name: Create prerelease
        uses: Energinet-Datahub/.github/.github/actions/github-create-release@v14
        with:
          repo_token: ${{ github.token }}
          automatic_release_tag: ${{ steps.get_release_version_strings.outputs.release_version }}
          prerelease: true
          title: ${{ steps.get_release_version_strings.outputs.release_version }}
          files: |
            ${{ env.RELEASE_FOLDER_PATH }}/${{ steps.get_release_version_strings.outputs.release_zip_filename }}
