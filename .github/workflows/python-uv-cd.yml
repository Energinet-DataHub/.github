# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Python UV CD

on:
  workflow_call:
    inputs:
      subsystem_name:
        type: string
        description: |
          The name of the subsystem in which the deployment is made.
        required: true
      notification_email:
        type: string
        description: |
          The email to use to notify in case of a failed deployment.
        required: true
      sender_email:
        type: string
        description: |
          The email of the sender of the email notification.
        required: true
      postfix_latest:
        type: boolean
        description: |
          Whether to postfix the release name with "_latest".
        required: false
        default: true
      max_release_search_depth:
        type: number
        description: |
          The maximum number of releases to search for when finding the release matrix.
          Defaults to 1000.
        required: false
        default: 1000
      dispatch_deployment_event:
        type: boolean
        description: |
          Whether to dispatch a deployment event. If true, the following inputs are required:
          - environment_repository_path
          - dh3serviceaccount_appid
          - dh3serviceaccount_privatekey (secret)
          This creates an event with the name "<subsystem_name>-<package_name>-deployment-request-domain".
        required: false
        default: false
      environment_repository_path:
        type: string
        description: |
          The path to the repository where the deployment event is dispatched.
          Must be set if dispatch_deployment_event is true.
        required: false
        default: ""
      dh3serviceaccount_appid:
        type: string
        description: |
          The app id of the service account used to dispatch the deployment event.
          Must be set if dispatch_deployment_event is true.
        required: false
        default: ""
    secrets:
      gh_token:
        required: true
        description: |
          The GitHub token used to access the GitHub API.
      send_grid_api_key:
        required: true
        description: |
          This is used to send an email notification in case of a failed deployment.
      dh3serviceaccount_privatekey:
        required: false
        description: |
          The private key of the service account used to dispatch the deployment event.
          Must be set if dispatch_deployment_event is true.

jobs:
  #
  # With this, tool cache will be available in all jobs. This is a workaround as you cannot share a cache that was
  # created in a PR workflow. See more here: https://github.com/actions/cache?tab=readme-ov-file#cache-scopes
  #
  cd_tools:
    name: Install tools in Default for caching
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install tools
        uses: Energinet-DataHub/.github/.github/actions/asdf-install-tools@ci/python-cicd

  #
  # Build Release Matrix
  #
  cd_release_matrix:
    name: Build Release Matrix
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.release_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Find associated pull request
        uses: Energinet-DataHub/.github/.github/actions/find-related-pr-number@v14
        id: find_pull_request

      - name: Set Matrix
        id: release_matrix
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
        run: |
          MATRIX=$(gh release list -L ${{ inputs.max_release_search_depth }} --json isPrerelease,name -q '[.[] | select(.name | endswith("_${{ steps.find_pull_request.outputs.pull_request_number }}"))]')
          echo "Found matrix: $MATRIX"
          echo "matrix=$MATRIX" >>$GITHUB_OUTPUT
  #
  # Promote prerelease
  #
  cd_promote_prerelease:
    name: Promote prerelease
    runs-on: ubuntu-24.04
    needs: cd_release_matrix
    if: ${{ needs.cd_release_matrix.outputs.matrix != '[]' }}
    strategy:
      matrix:
        inputs: ${{ fromJson(needs.cd_release_matrix.outputs.matrix) }}
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Promote prerelease
        uses: Energinet-DataHub/.github/.github/actions/github-promote-prerelease@ci/python-cicd
        with:
          release_name: ${{ matrix.inputs.name }}
          postfix_latest: ${{ inputs.postfix_latest }}

      - name: Check Dispatch Variables
        id: check_dispatch_variables
        run: |
          SHOULD_DISPATCH=false
          if [[ "${{ inputs.environment_repository_path }}" && "${{ inputs.dh3serviceaccount_appid }}" && "${{ secrets.dh3serviceaccount_privatekey }}" ]]; then
            SHOULD_DISPATCH=true
          fi
          echo "SHOULD_DISPATCH=$SHOULD_DISPATCH" >>$GITHUB_OUTPUT

      - name: Create Dispatch Event name
        id: create_dispatch_event_name
        if: ${{ inputs.dispatch_deployment_event && steps.check_dispatch_variables.outputs.SHOULD_DISPATCH == 'true' }}
        run: |
          package_name=$(echo "${{ matrix.inputs.name }}" | grep -o '^.*_' | sed 's/_$//')
          event_name="${{ inputs.subsystem_name }}-${package_name}-deployment-request-domain"
          lowercase_event_name=$(echo $event_name | tr '[:upper:]' '[:lower:]')
          echo "Dispatching event: $lowercase_event_name"
          echo "event_name=$lowercase_event_name" >>$GITHUB_OUTPUT

      - name: Dispatch Release
        uses: Energinet-DataHub/.github/.github/actions/dispatch-deployment-event@ci/python-cicd
        if: ${{ inputs.dispatch_deployment_event && steps.check_dispatch_variables.outputs.SHOULD_DISPATCH == 'true' }}
        with:
          event_name: ${{ steps.create_dispatch_event_name.outputs.event_name }}
          repository: ${{ inputs.environment_repository_path }}
          app_id: ${{ inputs.dh3serviceaccount_appid }}
          private_key: ${{ secrets.dh3serviceaccount_privatekey }}

      - name: Notify Team of failed deployment
        uses: Energinet-DataHub/.github/.github/actions/send-email@v14
        if: ${{ failure() }}
        with:
          sendgrid-api-key: ${{ secrets.send_grid_api_key }}
          team-name: ${{ inputs.subsystem_name }}
          to: ${{ inputs.notification_email }}
          from: ${{ inputs.sender_email }}
          subject: "Deployment Failed: Measurements '${{ matrix.inputs.name }}'"
