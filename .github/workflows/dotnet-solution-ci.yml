# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: .NET solution CI

on:
  workflow_call:
    inputs:
      solution_file_path:
        required: true
        type: string
      tests_filter_expression:
        description: Filter expression to use with dotnet test
        required: false
        default: empty
        type: string
      dotnet_version:
        description: Install specified .NET Core SDK version
        required: false
        type: string
      operating_system:
        description: Must be a version of Windows, we do not support Linux for testing
        required: false
        default: windows-2022
        type: string
      use_cosmos_db_emulator:
        description: Install Cosmos DB emulator to support testing
        required: false
        default: false
        type: boolean
      # Node and modules
      use_azure_functions_tools:
        description: Install Azurite and Azure Functions Core Tools to support testing
        required: false
        default: false
        type: boolean
      node_version:
        description: Install specified Node.js version
        required: false
        default: "16"
        type: string
      azurite_version:
        description: Install specified Azurite version
        required: false
        default: 3.32.0
        type: string
      azure_functions_core_tools_version:
        description: Install specified Azure Functions Core Tools version
        required: false
        default: 4.0.5413
        type: string
      # SQL LocalDB 2019
      use_sqllocaldb_2019:
        description: Install 2019 version of SQL LocalDB to support testing
        required: false
        default: false
        type: boolean
      prepare_outputs:
        description: Setting this to true will require an action dotnet-prepare-outputs in the calling repository
        required: false
        default: false
        type: boolean
      environment:
        description: Can be used to set environment for OIDC which is AzureAuth
        required: false
        default: ""
        type: string
      run_integration_tests:
        description: Set to 'true' to log into Azure for executing integration tests
        required: false
        default: false
        type: boolean
      azure_integrationtest_spn_id:
        description: Azure Service Principal for executing integration tests
        required: false
        default: "false"
        type: string
      azure_integrationtest_tenant_id:
        description: Azure Tenant ID for executing integration tests
        required: false
        default: ""
        type: string
      azure_integrationtest_subscription_id:
        description: Azure subscription ID for executing integration tests
        required: false
        default: ""
        type: string
      azure_keyvault_url:
        description: Azure Keyvault URL with secrets used in integration tests
        required: false
        default: ""
        type: string

permissions:
  id-token: write
  contents: read
  issues: read # Needed by EnricoMi/publish-unit-test-result-action
  checks: write # Needed by EnricoMi/publish-unit-test-result-action
  pull-requests: write # Needed by EnricoMi/publish-unit-test-result-action

jobs:
  function_ci:
    runs-on: ${{ inputs.operating_system }}

    environment: ${{ inputs.environment }}

    env:
      BUILD_CONFIGURATION: Release
      OUTPUT_PATH: ${{ github.workspace }}\output
      # Necessary to manage Azure resources from automated tests
      AZURE_KEYVAULT_URL: ${{ inputs.azure_keyvault_url }}
      #
      # Only relevant if 'use_azure_functions_tools' is TRUE
      #
      # Set value used by 'AzuriteManager'
      #  Use 'AzuriteBlobFolderPath' for TestCommon version 4.2.0 and lower
      AzuriteBlobFolderPath: ${{ github.workspace }}\node_modules\.bin\
      #  Use 'AzuriteFolderPath' for TestCommon version 4.3.0 and higher
      AzuriteFolderPath: ${{ github.workspace }}\node_modules\.bin\
      # Overrides settings in 'functionhost.settings.json'
      FunctionAppHostPath: ${{ github.workspace }}\node_modules\azure-functions-core-tools\bin\func.dll

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Guard for Windows OS
        shell: bash
        run: |
          echo "Runner OS is $RUNNER_OS"
          if [ $RUNNER_OS == 'Windows' ]; then
            echo "$RUNNER_OS is supported"
          else
            echo "$RUNNER_OS is not supported"
            exit 1
          fi

      - name: Setup .NET ${{ inputs.dotnet_version }}
        if: ${{ inputs.dotnet_version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
        env:
          DOTNET_INSTALL_DIR: C:\Program Files\dotnet

      # If the emulator is not started within <timeout> seconds the 'Start-CosmosDbEmulator' timeout.
      # We have added a retry action to see if this can mitigate builds failing on this account.
      - name: Setup Azure Cosmos DB Emulator (with retry)
        if: ${{ inputs.use_cosmos_db_emulator == true }}
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          shell: pwsh
          command: |
            Write-Host "Start Cosmos DB Emulator..."
            Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
            $error.Clear()
            Start-CosmosDbEmulator -NoUI -Timeout 240
            if ($error)
            {
              Write-Host "Failed"
              Exit 1
            }

      - name: Use Node v${{ inputs.node_version }}
        if: ${{ inputs.use_azure_functions_tools == true }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Cache node modules
        if: ${{ inputs.use_azure_functions_tools == true }}
        id: cache-nodemodules
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-azurite-${{ inputs.azurite_version }}-func-${{ inputs.azure_functions_core_tools_version }}
          path: ${{ github.workspace }}\node_modules

      - name: Install Azurite v${{ inputs.azurite_version }}
        if: ${{ inputs.use_azure_functions_tools == true && steps.cache-nodemodules.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          npm install azurite@${{ inputs.azurite_version }}

      - name: Install Azure Functions Core Tools v${{ inputs.azure_functions_core_tools_version }}
        if: ${{ inputs.use_azure_functions_tools == true && steps.cache-nodemodules.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          npm install azure-functions-core-tools@${{ inputs.azure_functions_core_tools_version }}

      - name: Install SQL LocalDB 2019
        if: ${{ inputs.use_sqllocaldb_2019 == true }}
        shell: pwsh
        run: |
          Write-Host "Downloading..."
          Import-Module BitsTransfer
          Start-BitsTransfer -Source https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi -Destination SqlLocalDB.msi
          Write-Host "Installing..."
          Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES";

      # If a connection cannot be established within <timeout> seconds it fails.
      # We have added a retry action to see if this can mitigate builds failing on this account.
      - name: Verify SQL LocalDB 2019 (with retry)
        if: ${{ inputs.use_sqllocaldb_2019 == true }}
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 3
          retry_on: error
          shell: pwsh
          command: |
            Write-Host "Checking version..."
            $error.Clear()
            sqlcmd -l 60 -S "(localdb)\MSSQLLocalDB" -Q "SELECT @@VERSION;"
            if ($error)
            {
              Write-Host "Failed"
              Exit 1
            }

      - name: Cache NuGet packages
        uses: actions/cache@v4
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} # hash of project files
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: dotnet restore ${{ inputs.solution_file_path }}

      - name: Build solution
        run: dotnet build ${{ inputs.solution_file_path }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      - name: Login to use Azure resources from automated tests
        if: ${{ inputs.run_integration_tests == true }}
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azure_integrationtest_spn_id }}
          tenant-id: ${{ inputs.azure_integrationtest_tenant_id }}
          subscription-id: ${{ inputs.azure_integrationtest_subscription_id }}

      - name: Run tests
        shell: pwsh
        run: |
          dotnet tool install --tool-path ./temp/reportgenerator dotnet-reportgenerator-globaltool
          # Handle filter expression
          if ( '${{ inputs.tests_filter_expression }}' -eq 'empty' )
          {
            dotnet test ${{ inputs.solution_file_path }} `
              --no-build --configuration ${{ env.BUILD_CONFIGURATION }} `
              --verbosity normal --logger "trx;logfilename=testResults.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover `
              --output ${{ github.workspace }}\output `
          }
          else
          {
            dotnet test ${{ inputs.solution_file_path }} `
              --no-build --configuration ${{ env.BUILD_CONFIGURATION }} `
              --filter '${{ inputs.tests_filter_expression }}' `
              --verbosity normal --logger "trx;logfilename=testResults.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover `
              --output ${{ github.workspace }}\output `
          }

      - name: Publish test report
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          files: |
            **/TestResults/*.trx

      # Call action in source (caller) repository
      - name: Prepare outputs
        if: ${{ inputs.prepare_outputs == true }}
        uses: ./.github/actions/dotnet-prepare-outputs
        with:
          output_path: ${{ env.OUTPUT_PATH }}

      - name: Zip outputs
        if: ${{ inputs.prepare_outputs == true }}
        uses: thedoctor0/zip-release@0.6.2
        with:
          type: zip
          filename: dotnet-outputs.zip
          directory: ${{ env.OUTPUT_PATH }}

      - name: Upload dotnet artifact
        if: ${{ inputs.prepare_outputs == true }}
        uses: actions/upload-artifact@v4
        with:
          name: dotnet
          path: ${{ env.OUTPUT_PATH }}/dotnet-outputs.zip
          if-no-files-found: error
