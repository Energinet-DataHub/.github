# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: .NET solution CI

on:
  workflow_call:
    inputs:
      SOLUTION_FILE_PATH:
        required: true
        type: string
      DOTNET_VERSION:
        required: true
        type: string
      OPERATING_SYSTEM:
        required: false
        default: 'windows-2022'
        type: string
      USE_COSMOS_DB_EMULATOR:
        required: false
        default: false
        type: boolean
      # Use Azurite and Azure Functions Core Tools to support testing
      USE_AZURE_FUNCTIONS_TOOLS:
        required: false
        default: false
        type: boolean
      USE_SQLLOCALDB_2019:
        required: false
        default: false
        type: boolean
    secrets:
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      AZURE_SPN_ID:
        required: false
      AZURE_SPN_SECRET:
        required: false
      AZURE_KEYVAULT_URL:
        required: false
      AZURE_SECRETS_KEYVAULT_URL:
        required: false

jobs:
  function_ci:
    runs-on: ${{ inputs.OPERATING_SYSTEM }}

    env:
      BUILD_CONFIGURATION: Release
      # Tool versions
      NODE_VERSION: '16'
      AZURITE_VERSION: '3.15.0'
      AZURE_FUNCTIONS_CORE_TOOLS_VERSION: '4.0.3971'
      # Necessary to manage Azure resources for tests
      AZURE_KEYVAULT_URL: ${{ secrets.AZURE_KEYVAULT_URL }}
      # Necessary to provide secrets for authentication and authorization if needed
      AZURE_SECRETS_KEYVAULT_URL: ${{ secrets.AZURE_SECRETS_KEYVAULT_URL }}
      #
      # Only relevant if USE_AZURE_FUNCTIONS_TOOLS is TRUE
      #
      # Set value used by 'AzuriteManager'
      AzuriteBlobFolderPath: '${{ github.workspace }}\node_modules\.bin\'
      # Overrides settings in 'functionhost.settings.json'
      FunctionAppHostPath: '${{ github.workspace }}\node_modules\azure-functions-core-tools\bin\func.dll'

    steps:
      - name: Checkout repository
        uses: actions/checkout@master

      - name: Setup .NET 3.1.x
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
        env:
          DOTNET_INSTALL_DIR: 'C:\Program Files\dotnet'

      - name: Setup .NET ${{ inputs.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}
        env:
          DOTNET_INSTALL_DIR: 'C:\Program Files\dotnet'

      - name: Setup Azure Cosmos DB Emulator
        if: ${{ inputs.USE_COSMOS_DB_EMULATOR == true }}
        shell: pwsh
        run: |
          Write-Host "Start Cosmos DB Emulator..."
          Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
          Start-CosmosDbEmulator

      - name: Use Node v${{ env.NODE_VERSION }}
        if: ${{ inputs.USE_AZURE_FUNCTIONS_TOOLS == true }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        if: ${{ inputs.USE_AZURE_FUNCTIONS_TOOLS == true }}
        id: cache-nodemodules
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-azurite-${{ env.AZURITE_VERSION }}-func-${{ env.AZURE_FUNCTIONS_CORE_TOOLS_VERSION }}
          path: ${{ github.workspace }}\node_modules

      - name: Install Azurite v${{ env.AZURITE_VERSION }}
        if: ${{ inputs.USE_AZURE_FUNCTIONS_TOOLS == true }} && steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: |
          npm install azurite@${{ env.AZURITE_VERSION }}

      - name: Install Azure Functions Core Tools v${{ env.AZURE_FUNCTIONS_CORE_TOOLS_VERSION }}
        if: ${{ inputs.USE_AZURE_FUNCTIONS_TOOLS == true }} && steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm install azure-functions-core-tools@${{ env.AZURE_FUNCTIONS_CORE_TOOLS_VERSION }}

      - name: Install SQL LocalDB 2019
        if: ${{ inputs.USE_SQLLOCALDB_2019 == true }}
        shell: pwsh
        run: |
          Write-Host "Downloading..."
          Import-Module BitsTransfer
          Start-BitsTransfer -Source https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi -Destination SqlLocalDB.msi
          Write-Host "Installing..."
          Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES";
          Write-Host "Checking version..."
          sqlcmd -l 60 -S "(localdb)\MSSQLLocalDB" -Q "SELECT @@VERSION;"

      - name: Login to use Azure resources in integration tests
        if: ${{ env.AZURE_KEYVAULT_URL != '' && env.AZURE_SECRETS_KEYVAULT_URL != '' }}
        run: |
          az login --service-principal --username "${{ secrets.AZURE_SPN_ID }}" --password "${{ secrets.AZURE_SPN_SECRET }}" --tenant "${{ secrets.AZURE_TENANT_ID }}"
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

      - name: Cache NuGet packages
        uses: actions/cache@v2
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: dotnet restore ${{ inputs.SOLUTION_FILE_PATH }}

      - name: Build solution
        run: dotnet build ${{ inputs.SOLUTION_FILE_PATH }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      - name: Run tests and publish report
        run: |
          dotnet tool install --tool-path ./temp/reportgenerator dotnet-reportgenerator-globaltool
          dotnet test ${{ inputs.SOLUTION_FILE_PATH }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity normal --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover --output ${{ github.workspace }}/output