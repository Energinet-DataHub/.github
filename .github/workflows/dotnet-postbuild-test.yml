# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: .NET test

# DESCRIPTION:
# This workflow will run tests and code coverage of .NET xUnit test projects
# that has been previously builded and uploaded as the 'dotnet-tests' artifact.
#
# It is intended to run tests in one .NET xUnit test project, and support
# filters, so developers can split the execution of tests on multiple runners
# and utilize parallel execution to reduce the overall workflow execution time.
#
# To prepare the 'dotnet-tests' artifact run the 'dotnet-solution-ci-build.yml'
# workflow as a job in parallel of the test workflow. This allows steps of the
# test workflow to utilize the build time for setting up the job for executing tests.
#
# The download step will use a retry action to wait for the 'dotnet-tests'
# artifact to be ready. Each failing download attempt will be written to the build
# log as an error, but can be ignored. If the build takes too long, the test
# job will fail after the last retry attempt.

on:
  workflow_call:
    inputs:
      tests_dll_file_path:
        description: Relative path from artifacts folder to test assembly
        required: true
        type: string
      tests_filter_expression:
        description: Filter expression to use with dotnet test
        required: false
        default: empty
        type: string
      aspnetcore_test_contentroot_variable_name:
        description: Name of an environment variable used for configuration of WebApplicationFactory<TEntryPoint>
        required: false
        default: empty # Cannot be '', it must contain a string that is also valid environment name
        type: string
      aspnetcore_test_contentroot_variable_value:
        description: Value of an environment variable used for configuration of WebApplicationFactory<TEntryPoint>
        required: false
        default: ""
        type: string
      dotnet_version:
        description: Install specified .NET Core SDK version
        required: false
        default: 8.0.204
        type: string
      operating_system:
        description: Must be a version of Windows, we do not support Linux for testing
        required: false
        default: windows-2022
        type: string
      download_attempt_limit:
        description: Number of times we retry downloading dotnet-tests artifact (effectively waiting for the build job to complete)
        required: false
        default: 12
        type: number
      use_cosmos_db_emulator:
        description: Install Cosmos DB emulator to support testing
        required: false
        default: false
        type: boolean
      # Node and modules
      use_azure_functions_tools:
        description: Install Azurite and Azure Functions Core Tools to support testing
        required: false
        default: false
        type: boolean
      node_version:
        description: Install specified Node.js version
        required: false
        default: "16"
        type: string
      azurite_version:
        description: Install specified Azurite version
        required: false
        default: 3.29.0
        type: string
      azure_functions_core_tools_version:
        description: Install specified Azure Functions Core Tools version
        required: false
        default: 4.0.5413
        type: string
      # SQL LocalDB 2019
      use_sqllocaldb_2019:
        required: false
        default: false
        type: boolean
      environment:
        description: Can be used to set environment for OIDC which is AzureAuth
        required: false
        default: ""
        type: string
      run_integration_tests:
        description: Set to 'true' to log into Azure for executing integration tests
        required: false
        default: false
        type: boolean
      azure_integrationtest_spn_id:
        description: Azure Service Principal for executing integration tests
        required: false
        default: ""
        type: string
      azure_integrationtest_tenant_id:
        description: Azure Tenant ID for executing integration tests
        required: false
        default: ""
        type: string
      azure_integrationtest_subscription_id:
        description: Azure subscription ID for executing integration tests
        required: false
        default: ""
        type: string
      azure_keyvault_url:
        description: Azure Keyvault URL with secrets used in integration tests
        required: false
        default: ""
        type: string
      azure_b2csecrets_keyvault_url:
        description: Azure Keyvault URL with B2C secrets used in integration tests
        required: false
        default: ""
        type: string

permissions:
  id-token: write
  contents: read
  issues: read # Needed by EnricoMi/publish-unit-test-result-action
  checks: write # Needed by EnricoMi/publish-unit-test-result-action
  pull-requests: write # Needed by EnricoMi/publish-unit-test-result-action

jobs:
  dotnet_ci_test:
    runs-on: ${{ inputs.operating_system }}

    environment: ${{ inputs.environment }}

    env:
      ARTIFACTS_PATH: ${{ github.workspace }}\artifacts
      # Necessary to manage Azure resources from automated tests
      AZURE_KEYVAULT_URL: ${{ inputs.azure_keyvault_url }}
      # Necessary to provide B2C information that allows us to retrieve an access token from automated tests
      AZURE_B2CSECRETS_KEYVAULT_URL: ${{ inputs.azure_b2csecrets_keyvault_url }}
      #
      # Only relevant if 'use_azure_functions_tools' is TRUE
      #
      # Set value used by 'AzuriteManager'
      #  Use 'AzuriteBlobFolderPath' for TestCommon version 4.2.0 and lower
      AzuriteBlobFolderPath: ${{ github.workspace }}\node_modules\.bin\
      #  Use 'AzuriteFolderPath' for TestCommon version 4.3.0 and higher
      AzuriteFolderPath: ${{ github.workspace }}\node_modules\.bin\
      # Overrides settings in 'functionhost.settings.json'
      FunctionAppHostPath: ${{ github.workspace }}\node_modules\azure-functions-core-tools\bin\func.dll
    steps:
      - name: Guard for Windows OS
        shell: bash
        run: |
          echo "Runner OS is $RUNNER_OS"
          if [ $RUNNER_OS == 'Windows' ]; then
            echo "$RUNNER_OS is supported"
          else
            echo "$RUNNER_OS is not supported"
            exit 1
          fi

      - name: Setup .NET ${{ inputs.dotnet_version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
        env:
          DOTNET_INSTALL_DIR: C:\Program Files\dotnet

      # If the emulator is not started within <timeout> seconds the 'Start-CosmosDbEmulator' timeout.
      # We have added a retry action to see if this can mitigate builds failing on this account.
      - name: Setup Azure Cosmos DB Emulator (with retry)
        if: ${{ inputs.use_cosmos_db_emulator == true }}
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          shell: pwsh
          command: |
            Write-Host "Start Cosmos DB Emulator..."
            Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
            $error.Clear()
            Start-CosmosDbEmulator -NoUI -Timeout 240
            if ($error)
            {
              Write-Host "Failed"
              Exit 1
            }

      - name: Use Node v${{ inputs.node_version }}
        if: ${{ inputs.use_azure_functions_tools == true }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Cache node modules
        if: ${{ inputs.use_azure_functions_tools == true }}
        id: cache-nodemodules
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-azurite-${{ inputs.azurite_version }}-func-${{ inputs.azure_functions_core_tools_version }}
          path: ${{ github.workspace }}\node_modules

      - name: Install Azurite v${{ inputs.azurite_version }}
        if: ${{ inputs.use_azure_functions_tools == true && steps.cache-nodemodules.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          npm install azurite@${{ inputs.azurite_version }}

      - name: Install Azure Functions Core Tools v${{ inputs.azure_functions_core_tools_version }}
        if: ${{ inputs.use_azure_functions_tools == true && steps.cache-nodemodules.outputs.cache-hit != 'true' }}
        shell: pwsh
        run: |
          npm install azure-functions-core-tools@${{ inputs.azure_functions_core_tools_version }}

      - name: Install SQL LocalDB 2019
        if: ${{ inputs.use_sqllocaldb_2019 == true }}
        shell: pwsh
        run: |
          Write-Host "Downloading..."
          Import-Module BitsTransfer
          Start-BitsTransfer -Source https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi -Destination SqlLocalDB.msi
          Write-Host "Installing..."
          Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES";

      # If a connection cannot be established within <timeout> seconds it fails.
      # We have added a retry action to see if this can mitigate builds failing on this account.
      - name: Verify SQL LocalDB 2019 (with retry)
        if: ${{ inputs.use_sqllocaldb_2019 == true }}
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 3
          retry_on: error
          shell: pwsh
          command: |
            Write-Host "Checking version..."
            $error.Clear()
            sqlcmd -l 60 -S "(localdb)\MSSQLLocalDB" -Q "SELECT @@VERSION;"
            if ($error)
            {
              Write-Host "Failed"
              Exit 1
            }

      - name: Login to use Azure resources from automated tests
        if: ${{ inputs.run_integration_tests == true }}
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azure_integrationtest_spn_id }}
          tenant-id: ${{ inputs.azure_integrationtest_tenant_id }}
          subscription-id: ${{ inputs.azure_integrationtest_subscription_id }}

      - name: Wait for dotnet-tests artifact to be ready for download
        uses: Wandalen/wretry.action@v1
        with:
          action: actions/download-artifact@v3
          with: |
            name: dotnet-tests
            path: ${{ env.ARTIFACTS_PATH }}
          attempt_limit: ${{ inputs.download_attempt_limit }}
          attempt_delay: 15000

      - name: Unzip dotnet-tests-outputs.zip
        shell: pwsh
        run: |
          Expand-Archive '${{ env.ARTIFACTS_PATH }}\dotnet-tests-outputs.zip' '${{ github.workspace }}'

      # To ensure code coverage tooling is available in bin folders, teams must use 'publish' on test assemblies
      # See https://github.com/coverlet-coverage/coverlet/issues/521#issuecomment-522429394
      - name: Run tests
        shell: pwsh
        run: |
          dotnet tool install --global dotnet-coverage --version 17.5.0
          # Configure content root for WebApplicationFactory<TEntryPoint>
          if ( '${{ inputs.aspnetcore_test_contentroot_variable_name }}' -ne 'empty' )
          {
            $Env:${{ inputs.aspnetcore_test_contentroot_variable_name }} = '${{ github.workspace }}${{ inputs.aspnetcore_test_contentroot_variable_value }}'
          }
          # Handle filter expression
          if ( '${{ inputs.tests_filter_expression }}' -eq 'empty' )
          {
            dotnet-coverage collect -f xml -o TestResults\coverage.xml dotnet test `
              ${{ github.workspace }}${{ inputs.tests_dll_file_path }} `
              --logger:"console;verbosity=normal" --logger:"trx;logfilename=logs.trx" `
          }
          else
          {
            dotnet-coverage collect -f xml -o TestResults\coverage.xml dotnet test `
              ${{ github.workspace }}${{ inputs.tests_dll_file_path }} `
              --filter '${{ inputs.tests_filter_expression }}' `
              --logger:"console;verbosity=normal" --logger:"trx;logfilename=logs.trx" `
          }

          $testFailures = Select-String -Path '.\TestResults\logs.trx' -Pattern '\[FAIL\]'
          $testFailures

      - name: Publish test report
        if: always()
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          check_name: Test results for ${{ inputs.tests_dll_file_path }}
          comment_title: Test results for ${{ inputs.tests_dll_file_path }}
          comment_mode: failures
          files: |
            **/TestResults/*.trx
