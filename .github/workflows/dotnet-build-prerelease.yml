# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: .NET build - prerelease

# DESCRIPTION:
# This workflow will require two actions in the calling repository:
#  - dotnet-prepare-outputs
#  - dotnet-tests-prepare-outputs
#
# The workflow will build the dotnet code. If it is running as part
# of a PR it will also create a prerelease package containing the
# output. The prerelease name will be in the format 'dotnet_<PR-number>'.
#
# The workflow will also coordinate the creation of an artifact
# 'dotnet-tests' containing outputs necessary for executing tests.

on:
  workflow_call:
    inputs:
      SOLUTION_FILE_PATH:
        required: true
        type: string
      DOTNET_VERSION:
        description: 'Install specified .NET Core SDK version'
        required: false
        default: '6.0'
        type: 'string'
      OPERATING_SYSTEM:
        required: false
        default: 'ubuntu-22.04'
        type: string

jobs:
  create_prerelease:
    runs-on: ${{ inputs.OPERATING_SYSTEM }}

    env:
      BUILD_CONFIGURATION: Release
      TESTS_OUTPUT_PATH: ${{ github.workspace }}/tests-output
      TESTS_ZIP_FILENAME: dotnet-tests-outputs.zip
      RELEASE_FOLDER_PATH: ${{ github.workspace }}/output
      RELEASE_VERSION: dotnet_${{ github.event.pull_request.number }}
      RELEASE_ZIP_FILENAME: dotnet_${{ github.event.pull_request.number }}.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Prepare environment variables for OS
        shell: bash
        run: |
          echo "Runner OS is $RUNNER_OS"
          if [ $RUNNER_OS == 'Linux' ]; then
            echo "DOTNET_INSTALL_DIR=/usr/share/dotnet" >> $GITHUB_ENV
          elif [ $RUNNER_OS == 'Windows' ]; then
            echo "DOTNET_INSTALL_DIR=C:\Program Files\dotnet" >> $GITHUB_ENV
          else
            echo "$RUNNER_OS is not supported"
            exit 1
          fi

      - name: Setup .NET ${{ inputs.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}
        env:
          DOTNET_INSTALL_DIR: ${{ env.DOTNET_INSTALL_DIR }}

      - name: Cache NuGet packages
        if: runner.os == 'Windows'
        uses: actions/cache@v3
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: dotnet restore ${{ inputs.SOLUTION_FILE_PATH }}

      - name: Build solution
        run: dotnet build ${{ inputs.SOLUTION_FILE_PATH }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

      # Call action in source (caller) repository
      - name: Prepare dotnet tests outputs
        uses: ./.github/actions/dotnet-tests-prepare-outputs
        with:
          OUTPUT_PATH: ${{ env.TESTS_OUTPUT_PATH }}

      - name: Zip dotnet tests outputs
        uses: thedoctor0/zip-release@0.6.2
        with:
          type: zip
          filename: ${{ env.TESTS_ZIP_FILENAME }}
          directory: ${{ env.TESTS_OUTPUT_PATH }}

      - name: Upload dotnet-tests artifact
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-tests
          path: ${{ env.TESTS_OUTPUT_PATH }}/${{ env.TESTS_ZIP_FILENAME }}
          if-no-files-found: error

      # Call action in source (caller) repository
      - name: Prepare dotnet outputs
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/dotnet-prepare-outputs
        with:
          OUTPUT_PATH: ${{ env.RELEASE_FOLDER_PATH }}

      - name: Zip files for prerelease
        if: github.event_name == 'pull_request'
        uses: thedoctor0/zip-release@0.6.2
        with:
          type: 'zip'
          filename: ${{ env.RELEASE_ZIP_FILENAME }}
          directory: ${{ env.RELEASE_FOLDER_PATH }}

      - name: Create prelease
        if: github.event_name == 'pull_request'
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ env.RELEASE_VERSION }}
          prerelease: true
          title: ${{ env.RELEASE_VERSION }}
          files: |
            ${{ env.RELEASE_FOLDER_PATH }}/${{ env.RELEASE_ZIP_FILENAME }}
