# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: .NET build - prerelease

# DESCRIPTION:
# This workflow will require two actions in the calling repository:
#  - dotnet-prepare-outputs
#  - dotnet-tests-prepare-outputs
#
# The workflow will build the dotnet code and add the GitHub PR and SHA
# information as .NET assembly meta data. If it is running as part
# of a PR it will also create a prerelease package containing the
# output. The prerelease name will be in the format 'dotnet_<PR-number>'.
#
# The workflow will also coordinate the creation of an artifact
# 'dotnet-tests' containing outputs necessary for executing tests.

on:
  workflow_call:
    inputs:
      solution_file_path:
        required: true
        type: string
      dotnet_major_version:
        required: false
        type: string
        description: Install specified .NET Core SDK version. Runs on Ubuntu 24.04 only, so the consumer should not expect a version to be pre-installed. Alternatively, specify the version in a global.json file in the repository root.
        default: ""
      sbom_root_directory:
        required: false
        type: string
        description: The root directory to generate the SBOM for. Defaults to the repository root.
        default: .
      release_name_prefix:
        required: false
        type: string
        description: Use this variable if you want to prefix the release name
        default: dotnet
      project_name:
        required: false
        default: ""
        type: string
      prepare_dotnet_tests:
        required: false
        default: true
        type: boolean
jobs:
  create_prerelease:
    runs-on: ubuntu-24.04
    name: Build ${{ inputs.solution_file_path}}
    env:
      BUILD_CONFIGURATION: Release
      TESTS_OUTPUT_PATH: ${{ github.workspace }}/tests-output
      TESTS_ZIP_FILENAME: dotnet-tests-outputs.zip
      RELEASE_FOLDER_PATH: ${{ github.workspace }}/output
      SBOM_PATH: ${{ github.workspace }}/sbom.json

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for existence of global.json
        if: ${{ inputs.dotnet_major_version == '' }}
        id: check_global_json
        run: |
          if [ -f "global.json" ]; then
            echo "global_json_exists=true" >> $GITHUB_OUTPUT
          else
            echo "global_json_exists=false" >> $GITHUB_OUTPUT
            echo "Neither 'dotnet_major_version' input nor 'global.json' file found."
            echo "Failuring the workflow as .NET version is not specified."
            exit 1
          fi

      - name: Setup .NET using global.json
        if: ${{ steps.check_global_json.outputs.global_json_exists == 'true' }}
        uses: actions/setup-dotnet@v5
        with:
          global-json-file: global.json

      - name: Setup .NET ${{ inputs.dotnet_major_version }}
        if: ${{ inputs.dotnet_major_version }}
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ inputs.dotnet_major_version }}.0.1xx

      - name: Cache NuGet packages
        uses: actions/cache@v4
        id: cache-nuget
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} # hash of project files
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet packages
        run: dotnet restore ${{ inputs.solution_file_path }}

      - name: Block FluentAssertions v8
        run: |
          dotnet list ${{ inputs.solution_file_path }} package --format json > versions.json

          # Find all versions of FluentAssertions
          jq -r '[.. | objects | select(.topLevelPackages? != null) | .topLevelPackages[] | select(.id == "FluentAssertions") | .requestedVersion | gsub("\\[|\\]"; "")]' versions.json > fluentassertions-versions.json

          # Check if any version is greater than or equal to 8.0.0
          forbidden_version=$(jq -r '.[] | select(. >= "8.0.0")' fluentassertions-versions.json)
          echo "forbidden_version: '$forbidden_version'"
          if [ -n "$forbidden_version" ]; then
            echo -e "::error title='Forbidden FluentAssertions version detected'::Forbidden 'FluentAssertions' version $forbidden_version found"
            exit 1
          fi

      - name: Find associated pull request
        uses: Energinet-DataHub/.github/.github/actions/find-related-pr-number@v14
        id: find_pull_request

      - name: Build solution
        run: |
          # We build the GitHub PR and SHA (last merge commit on PR) into the .NET assembly meta data:
          #   The full 'InformationalVersion' format is '<version>+PR_<pr number>+SHA_<sha>'.
          #
          #   The value of 'SourceRevisionId' is appended to the assembly attribute 'InformationalVersion', separated by a '+' sign.
          #   See: https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#generateassemblyinfo
          #
          dotnet --info
          dotnet build ${{ inputs.solution_file_path }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} -p:SourceRevisionId=PR_${{ steps.find_pull_request.outputs.pull_request_number }}+SHA_${{ github.sha }}

      - name: Generate SBOM for node_modules
        uses: anchore/sbom-action@v0
        with:
          path: ${{ inputs.sbom_root_directory }}
          format: spdx-json
          output-file: ${{ env.SBOM_PATH }}

      # Call action in source (caller) repository
      - name: Prepare dotnet tests outputs
        if: ${{ inputs.prepare_dotnet_tests == true }}
        uses: ./.github/actions/dotnet-tests-prepare-outputs
        with:
          output_path: ${{ env.TESTS_OUTPUT_PATH }}

      - name: Zip dotnet tests outputs
        if: ${{ inputs.prepare_dotnet_tests == true }}
        uses: thedoctor0/zip-release@0.6.2
        with:
          type: zip
          filename: ${{ env.TESTS_ZIP_FILENAME }}
          directory: ${{ env.TESTS_OUTPUT_PATH }}

      - name: Upload dotnet-tests artifact
        if: ${{ inputs.prepare_dotnet_tests == true }}
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-tests
          path: ${{ env.TESTS_OUTPUT_PATH }}/${{ env.TESTS_ZIP_FILENAME }}
          if-no-files-found: error

      # Call action in source (caller) repository
      - name: Prepare dotnet outputs
        if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
        uses: ./.github/actions/dotnet-prepare-outputs
        with:
          output_path: ${{ env.RELEASE_FOLDER_PATH }}
          project_name: ${{ inputs.project_name }}
          sbom_path: ${{ env.SBOM_PATH }}

      - name: Get release version strings
        id: get_release_version_strings
        uses: Energinet-DataHub/.github/.github/actions/github-get-releaseversion-strings@v14
        with:
          release_name_prefix: ${{ inputs.release_name_prefix }}

      - name: Zip files for prerelease
        if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
        uses: thedoctor0/zip-release@0.6.2
        with:
          type: zip
          filename: ${{ steps.get_release_version_strings.outputs.release_zip_filename }}
          directory: ${{ env.RELEASE_FOLDER_PATH }}

      - name: Create pre-release
        if: github.event_name == 'pull_request' || github.event_name == 'merge_group'
        uses: Energinet-DataHub/.github/.github/actions/github-create-release@v14
        with:
          repo_token: ${{ github.token }}
          automatic_release_tag: ${{ steps.get_release_version_strings.outputs.release_version }}
          prerelease: true
          title: ${{ steps.get_release_version_strings.outputs.release_version }}
          files: |
            ${{ env.RELEASE_FOLDER_PATH }}/${{ steps.get_release_version_strings.outputs.release_zip_filename }}
