name: Python UV CI

# The concept of `core` must be removed prior to moving these workflows and
# actions to a public repository. The `core` concept is specific to the
# Measurements project and is used to group packages that are released together.

on:
  workflow_call:
    inputs:
      packages_directory:
        type: string
        description: |
          Directory to search for python packages in. This recursively searches
          for directories containing a pyproject.toml file. All directories
          discovered are considered packages. Any package with changes will
          be tested, and given successful tests, a prerelease will be created
          with under the tag "<package_name>_<pull_request_number>".
          Defaults to workspace root.
        required: false
        default: ${{ github.workspace }}
      tests_directory:
        type: string
        description: |
          Directory to search for tests in. This recursively searches for
          directories containing a test directory. All directories discovered
          are considered test directories. Defaults to "tests".
        required: false
        default: tests
      create_prerelease:
        type: boolean
        description: |
          Create a prerelease for each package with changes. Default is false.
          This will create a prerelease for each package with changes under the tag "{package_name}_{issue_number}"
          or "{package_name}_{version}_{issue_number}" depending on the value of create_versioned_release.
        required: false
        default: true
      create_subsystem_release:
        type: boolean
        description: |
          If true, the release will include a directory called `subsystem_tests`, which
          contains the `src`, `tests`, and `subsystem_tests` directories, the `pyproject.toml`,
          and the `README.md` files.
          This is useful is you need to test parts of the system in CD.
        required: false
        default: false
      create_versioned_release:
        type: boolean
        description: |
          If true, the release name will be "{package_name}_{version}_{issue_number}".
          Otherwise, the release name will be "{package_name}_{issue_number}".
        required: false
        default: false
      environment:
        type: string
        description: |
          The name of the environment to use for OIDC authentication. This
          environment must be defined in the repository's environment secrets.
          Use "AzureAuth" for Azure authentication.
        required: false
        default: ""
      azure_spn_id:
        type: string
        description: The Azure SPN ID for the integration test environment. Requires environment to be "AzureAuth".
        required: false
        default: ""
      azure_tenant_id:
        type: string
        description: The Azure tenant ID for the integration test environment. Requires environment to be "AzureAuth".
        required: false
        default: ""
      azure_subscription_id:
        type: string
        description: The Azure subscription ID for the integration test environment. Requires environment to be "AzureAuth".
        required: false
        default: ""
      azure_keyvault_url:
        type: string
        description: The Azure KeyVault URL for the integration test environment. Requires environment to be "AzureAuth".
      pytest_addopts:
        type: string
        description: |
          Additional arguments to pass to pytest. This is useful for passing
          arguments to pytest that are not supported by the uvtest action.
          Any paths should be considered relative to the package directory.
        required: false
        default: ""
      package_source_code_directory:
        type: string
        description: |
          The directory where the source code of the package is located.
          This is used in versioned releases to check whether version and
          release notes have been updated.
        required: false
        default: src

permissions:
  id-token: write
  contents: write
  issues: read
  checks: write
  pull-requests: write

jobs:
  #
  # Build Package Matrix
  #
  ci_matrix:
    name: Build Package Matrix
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.package_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Discover Pyproject
        uses: Energinet-DataHub/.github/.github/actions/python-discover-pyproject@v14
        id: package_matrix
        with:
          path: ${{ inputs.packages_directory }}
          versioned-release: ${{ inputs.create_versioned_release }}
          issue-number: ${{ github.event.number }}

  #
  # Test Packages and Create Prerelease
  #
  ci_test:
    name: Create Prerelease and Test Packages
    runs-on: ubuntu-24.04
    needs: [ci_matrix]
    # Environment is used when using OIDC to login and access the integration test environment
    environment: ${{ inputs.environment }}
    env:
      # Necessary to manage Azure resources from automated tests
      AZURE_KEYVAULT_URL: ${{ inputs.azure_keyvault_url }}
    strategy:
      matrix:
        inputs: ${{ fromJson(needs.ci_matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if ${{ matrix.inputs.package_name }} has changed
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            is_changed:
              - ${{ matrix.inputs.package_path }}/**
            is_src_changed:
              - ${{ matrix.inputs.package_path }}/${{ inputs.package_source_code_directory }}/**

      - name: Install tools
        if: ${{ steps.changes.outputs.is_src_changed == 'true' }}
        uses: Energinet-DataHub/.github/.github/actions/asdf-install-tools@v15

      - name: Check Version
        if: ${{ steps.changes.outputs.is_src_changed == 'true' && inputs.create_versioned_release }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE=$(gh release list --json isLatest,name -q '.[] | select(.isLatest) | .name' -L 1000)
          NEW_VERSION=$(cat ${{ matrix.inputs.package_path }}/pyproject.toml| grep -o "version.*" | cut -d'=' -f2 | tr -d '"' | tr -d ' ')
          OLD_VERSION=$(echo $LATEST_RELEASE | grep -o "[0-9]*\.[0-9]*\.[0-9]*" | cut -d'_' -f2)
          if [ "$OLD_VERSION" == "$NEW_VERSION" ]; then
            echo "Version $NEW_VERSION is the same as $OLD_VERSION. Please update the version in pyproject.toml."
            exit 1
          elif [ "$(printf '%s\n' "$OLD_VERSION" "$NEW_VERSION" | sort -V | head -n1)" != "$OLD_VERSION" ]; then
            echo "Version $NEW_VERSION is older than $OLD_VERSION. Please update the version in pyproject.toml."
            exit 1
          else
              RELEASE_NOTES=$(cat ${{ matrix.inputs.package_path }}/release-notes.md)
              if [[ $RELEASE_NOTES != *"## Version $NEW_VERSION"* ]]; then
                  echo "'## Version $NEW_VERSION' not found in release notes"
                  echo "Please add the release notes for version $NEW_VERSION in '${{ matrix.inputs.package_path }}/release-notes.md'"
                  exit 1
              fi
              echo "Version $NEW_VERSION is newer than $OLD_VERSION. Proceeding with the release..."
          fi

      - name: Lint and Format ${{ matrix.inputs.package_name }}
        uses: Energinet-DataHub/.github/.github/actions/python-uv-lint@v15
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        with:
          name: ${{ matrix.inputs.package_name }}
          path: ${{ matrix.inputs.package_path }}

      #
      # Build and Create Prerelease steps
      # Note: Conceptually this should be done after the tests, but we want to
      #       enable manual deployment before waiting for tests to pass to enhance DX.
      #
      - name: Build ${{ matrix.inputs.package_name }}
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        run: uv build --wheel --directory ${{ matrix.inputs.package_path }}

      - name: Create prerelease for ${{ matrix.inputs.package_name }}
        uses: Energinet-DataHub/.github/.github/actions/python-create-prerelease@pinSBOMVersion
        if: ${{ inputs.create_prerelease && steps.changes.outputs.is_changed == 'true' }}
        with:
          package_name: ${{ matrix.inputs.package_name }}
          package_path: ${{ matrix.inputs.package_path }}
          release_name: ${{ matrix.inputs.release_name }}
          create_subsystem_release: ${{ inputs.create_subsystem_release }}
          package_source_code_directory: ${{ matrix.inputs.package_path }}/${{ inputs.package_source_code_directory }}

      #
      # Testing steps
      #

      - name: Login to access Azure resources
        uses: azure/login@v2
        if: ${{ steps.changes.outputs.is_changed == 'true' && inputs.azure_spn_id != '' && inputs.azure_tenant_id != '' && inputs.azure_subscription_id != '' }}
        with:
          client-id: ${{ inputs.azure_spn_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Fetch secrets from Azure KeyVault
        id: secrets
        if: ${{ steps.changes.outputs.is_changed == 'true' && inputs.azure_spn_id != '' && inputs.azure_tenant_id != '' && inputs.azure_subscription_id != '' }}
        run: |
          workspace_url=$(az keyvault secret show --name "dbw-domain-test-workspace-url" --vault-name kvintgratwe002 --query "value" | tr -d '"')
          echo "workspace_url=https://$workspace_url" >>$GITHUB_OUTPUT
          workspace_token=$(az keyvault secret show --name "dbw-domain-test-workspace-token" --vault-name kvintgratwe002 --query "value" | tr -d '"')
          echo "workspace_token=$workspace_token" >>$GITHUB_OUTPUT
          warehouse_id=$(az keyvault secret show --name "dbw-sql-endpoint-id" --vault-name kvintgratwe002 --query "value" | tr -d '"')
          echo "warehouse_id=$warehouse_id" >>$GITHUB_OUTPUT

      - name: Test Integration ${{ matrix.inputs.package_name }}
        uses: Energinet-DataHub/.github/.github/actions/python-uv-test@v14
        if: ${{ steps.changes.outputs.is_changed == 'true' && inputs.azure_spn_id != '' && inputs.azure_tenant_id != '' && inputs.azure_subscription_id != '' }}
        env:
          DATABRICKS_HOST: ${{ steps.secrets.outputs.workspace_url }}
          DATABRICKS_TOKEN: ${{ steps.secrets.outputs.workspace_token }}
          DATABRICKS_WAREHOUSE_ID: ${{ steps.secrets.outputs.warehouse_id }}
        with:
          name: ${{ matrix.inputs.package_name }}
          path: ${{ matrix.inputs.package_path }}
          tests_path: ${{ inputs.tests_directory }}
          pytest_addopts: ${{ inputs.pytest_addopts }}

      - name: Test ${{ matrix.inputs.package_name }}
        uses: Energinet-DataHub/.github/.github/actions/python-uv-test@v14
        if: ${{ steps.changes.outputs.is_changed == 'true' && inputs.azure_spn_id == '' && inputs.azure_tenant_id == '' && inputs.azure_subscription_id == ''  }}
        with:
          name: ${{ matrix.inputs.package_name }}
          path: ${{ matrix.inputs.package_path }}
          tests_path: ${{ inputs.tests_directory }}
          pytest_addopts: ${{ inputs.pytest_addopts }}
