# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Publish release

on:
  workflow_call:
    secrets:
      PAT_TOKEN:
        required: true
        description: 'Personal access token'
      ENVIRONMENT_REPOSITORY_PATH:
        required: true
        description: 'Caller repository path'
    inputs:
      RELEASE_NAME_PREFIX:
        required: false
        type: string
        description: 'Use this variable if you want to prefix the release name'

jobs:
  define_job_variables:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_NAME: ${{ steps.set-outputs.outputs.RELEASE_NAME }}
      LATEST_RELEASE_NAME: ${{ steps.set-outputs.outputs.LATEST_RELEASE_NAME }}
    steps:
      - name: Find associated pull request
        uses: jwalton/gh-find-current-pr@v1
        id: find_pull_request
        with:
          state: all

      - name: Set outputs
        id: set-outputs
        shell: bash
        run: |
          echo "::set-output name=RELEASE_NAME::${{ inputs.RELEASE_NAME_PREFIX }}_${{ steps.find_pull_request.outputs.pr }}"
          echo "::set-output name=LATEST_RELEASE_NAME::${{ inputs.RELEASE_NAME_PREFIX }}_latest"

  create_latest_if_not_exists:
    needs: define_job_variables
    runs-on: ubuntu-latest
    steps:
      - name: Check if latest release exists
        shell: bash
        run: |
          latest_release_http_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.define_job_variables.outputs.LATEST_RELEASE_NAME }})
          if [ $latest_release_http_code -eq 404 ]
          then
            echo "fetching release from associated pull request"
            release_reference_response=$(curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ needs.define_job_variables.outputs.RELEASE_NAME }})
            release_sha=$(echo "$release_reference_response" | jq -r '.object.sha' | tr -d '"')

            echo "creating new reference from $release_sha"
            create_reference_response=$(curl -X POST -i -d "{\"ref\":\"refs/tags/${{ needs.define_job_variables.outputs.LATEST_RELEASE_NAME }}\",\"sha\":\"$release_sha\"}" -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/git/refs)
            echo $create_reference_response

            echo "creating new release from reference created before"
            create_release_response=$(curl -X POST -i -d "{\"tag_name\":\"${{ needs.define_job_variables.outputs.LATEST_RELEASE_NAME }}\",\"name\":\"${{ needs.define_job_variables.outputs.LATEST_RELEASE_NAME }}\"}" -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases)
            echo $create_release_response
          else
            echo "${{ needs.define_job_variables.outputs.LATEST_RELEASE_NAME }} already exists, returning"
          fi

  update_latest_package:
    needs: [define_job_variables, create_latest_if_not_exists]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch release id
        shell: bash
        id: fetch-release-id
        run: |
          release_response=$(curl -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.define_job_variables.outputs.LATEST_RELEASE_NAME }})
          release_id=$(echo "$release_response" | jq -r '.id' | tr -d '"')
          echo "Release id: $release_id"
          echo "::set-output name=RELEASE_ID::release_id"

      - name: Updating release description
        shell: bash
        run: |
          update_release_response=$(curl -X PATCH -i -d "{\"body\":\"Related release ${{ needs.define_job_variables.outputs.LATEST_RELEASE_NAME }}\"}" -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.fetch-release-id.outputs.RELEASE_ID }})
          echo $update_release_response


  