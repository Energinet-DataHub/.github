# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: .NET solution CI (test)

on:
  workflow_call:
    inputs:
      TESTS_DLL_FILE_PATH:
        description: 'Relative path from artifacts folder to test assembly'
        required: true
        type: string
      ASPNETCORE_TEST_CONTENTROOT_VARIABLE_NAME:
        description: 'Name of an environment variable used for configuration of WebApplicationFactory<TEntryPoint>'
        required: false
        default: 'empty' # Cannot be '', it must contain a string that is also valid environment name
        type: string
      ASPNETCORE_TEST_CONTENTROOT_VARIABLE_VALUE:
        description: 'Value of an environment variable used for configuration of WebApplicationFactory<TEntryPoint>'
        required: false
        default: ''
        type: string
      DOTNET_VERSION:
        description: 'Install specified .NET Core SDK version'
        required: false
        default: '6.0'
        type: 'string'
      OPERATING_SYSTEM:
        required: false
        default: 'windows-latest' # Must be a version of Windows, we do not support Linux for testing
        type: string
      USE_COSMOS_DB_EMULATOR:
        required: false
        default: false
        type: boolean
      # Use Azurite and Azure Functions Core Tools to support testing
      USE_AZURE_FUNCTIONS_TOOLS:
        required: false
        default: false
        type: boolean
      USE_SQLLOCALDB_2019:
        required: false
        default: false
        type: boolean
      CODE_COVERAGE_FLAGS:
        required: false
        default: ''
        type: string
    secrets:
      AZURE_TENANT_ID:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      AZURE_SPN_ID:
        required: false
      AZURE_KEYVAULT_URL:
        required: false
      AZURE_SECRETS_KEYVAULT_URL:
        required: false

permissions:
  id-token: write
  contents: read

jobs:
  dotnet_ci_test:
    runs-on: ${{ inputs.OPERATING_SYSTEM }}

    env:
      ARTIFACTS_PATH: ${{ github.workspace }}\artifacts
      # Tool versions
      NODE_VERSION: '16'
      AZURITE_VERSION: '3.18.0'
      AZURE_FUNCTIONS_CORE_TOOLS_VERSION: '4.0.4670'
      # Necessary to manage Azure resources for tests
      AZURE_KEYVAULT_URL: ${{ secrets.AZURE_KEYVAULT_URL }}
      # Necessary to provide secrets for authentication and authorization if needed
      AZURE_SECRETS_KEYVAULT_URL: ${{ secrets.AZURE_SECRETS_KEYVAULT_URL }}
      #
      # Only relevant if USE_AZURE_FUNCTIONS_TOOLS is TRUE
      #
      # Set value used by 'AzuriteManager'
      AzuriteBlobFolderPath: '${{ github.workspace }}\node_modules\.bin\'
      # Overrides settings in 'functionhost.settings.json'
      FunctionAppHostPath: '${{ github.workspace }}\node_modules\azure-functions-core-tools\bin\func.dll'

    steps:
      - name: Setup .NET ${{ inputs.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ inputs.DOTNET_VERSION }}
        env:
          DOTNET_INSTALL_DIR: 'C:\Program Files\dotnet'

      # If the emulator is not started within <timeout> seconds the 'Start-CosmosDbEmulator' timeout.
      # We have added a retry action to see if this can mitigate builds failing on this account.
      - name: Setup Azure Cosmos DB Emulator (with retry)
        if: ${{ inputs.USE_COSMOS_DB_EMULATOR == true }}
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          retry_on: error
          shell: pwsh
          command: |
            Write-Host "Start Cosmos DB Emulator..."
            Import-Module "$env:ProgramFiles\Azure Cosmos DB Emulator\PSModules\Microsoft.Azure.CosmosDB.Emulator"
            $error.Clear()
            Start-CosmosDbEmulator -NoUI -Timeout 240
            if ($error)
            {
              Write-Host "Failed"
              Exit 1
            }

      - name: Use Node v${{ env.NODE_VERSION }}
        if: ${{ inputs.USE_AZURE_FUNCTIONS_TOOLS == true }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        if: ${{ inputs.USE_AZURE_FUNCTIONS_TOOLS == true }}
        id: cache-nodemodules
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-azurite-${{ env.AZURITE_VERSION }}-func-${{ env.AZURE_FUNCTIONS_CORE_TOOLS_VERSION }}
          path: ${{ github.workspace }}\node_modules

      - name: Install Azurite v${{ env.AZURITE_VERSION }}
        if: ${{ inputs.USE_AZURE_FUNCTIONS_TOOLS == true && steps.cache-nodemodules.outputs.cache-hit != 'true' }}
        run: |
          npm install azurite@${{ env.AZURITE_VERSION }}

      - name: Install Azure Functions Core Tools v${{ env.AZURE_FUNCTIONS_CORE_TOOLS_VERSION }}
        if: ${{ inputs.USE_AZURE_FUNCTIONS_TOOLS == true && steps.cache-nodemodules.outputs.cache-hit != 'true' }}
        run: npm install azure-functions-core-tools@${{ env.AZURE_FUNCTIONS_CORE_TOOLS_VERSION }}

      - name: Install SQL LocalDB 2019
        if: ${{ inputs.USE_SQLLOCALDB_2019 == true }}
        shell: pwsh
        run: |
          Write-Host "Downloading..."
          Import-Module BitsTransfer
          Start-BitsTransfer -Source https://download.microsoft.com/download/7/c/1/7c14e92e-bdcb-4f89-b7cf-93543e7112d1/SqlLocalDB.msi -Destination SqlLocalDB.msi
          Write-Host "Installing..."
          Start-Process -FilePath "SqlLocalDB.msi" -Wait -ArgumentList "/qn", "/norestart", "/l*v SqlLocalDBInstall.log", "IACCEPTSQLLOCALDBLICENSETERMS=YES";

      # If a connection cannot be established within <timeout> seconds it fails.
      # We have added a retry action to see if this can mitigate builds failing on this account.
      - name: Verify SQL LocalDB 2019 (with retry)
        if: ${{ inputs.USE_SQLLOCALDB_2019 == true }}
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 2
          max_attempts: 3
          retry_on: error
          shell: pwsh
          command: |
            Write-Host "Checking version..."
            $error.Clear()
            sqlcmd -l 60 -S "(localdb)\MSSQLLocalDB" -Q "SELECT @@VERSION;"
            if ($error)
            {
              Write-Host "Failed"
              Exit 1
            }

      - name: Login to use Azure resources in integration tests
        if: ${{ env.AZURE_KEYVAULT_URL != '' || env.AZURE_SECRETS_KEYVAULT_URL != '' }}
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_SPN_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Download dotnet artifact
        uses: actions/download-artifact@v3
        with:
          name: dotnet
          path: ${{ env.ARTIFACTS_PATH }}

      - name: Unzip dotnet-outputs.zip
        shell: pwsh
        run: |
          Expand-Archive '${{ env.ARTIFACTS_PATH }}\dotnet-outputs.zip' '${{ env.ARTIFACTS_PATH }}'

      - name: Run tests and publish report
        shell: pwsh
        run: |
          dotnet tool install --tool-path ./temp/reportgenerator dotnet-reportgenerator-globaltool
          # Configure content root for WebApplicationFactory<TEntryPoint>
          if ( '${{ inputs.ASPNETCORE_TEST_CONTENTROOT_VARIABLE_NAME }}' -ne 'empty' )
          {
            $Env:${{ inputs.ASPNETCORE_TEST_CONTENTROOT_VARIABLE_NAME }} = '${{ env.ARTIFACTS_PATH }}${{ inputs.ASPNETCORE_TEST_CONTENTROOT_VARIABLE_VALUE }}'
          }
          dotnet test ${{ env.ARTIFACTS_PATH }}${{ inputs.TESTS_DLL_FILE_PATH }} --logger:"console;verbosity=normal" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@v3
        with:
          flags: ${{ inputs.CODE_COVERAGE_FLAGS }}
          fail_ci_if_error: false # Do not fail step when Codecov runs into errors during upload
          verbose: true
